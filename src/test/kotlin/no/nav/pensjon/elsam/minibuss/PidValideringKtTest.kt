package no.nav.pensjon.elsam.minibuss

import org.junit.jupiter.api.Assertions.assertFalse
import org.junit.jupiter.api.Assertions.assertTrue
import org.junit.jupiter.api.Test


class PidValideringKtTest {
    /**
     * Verify that special circumstances are not allowed when using strict Fnr validation.
     */
    @Test
    fun specialCircumstanceFnrValidatedDisable() {
        // validate the Pids with special circumstances disabled
        assertFalse(isValidPid("26067300000"))
        assertFalse(isValidPid("26067300001"))
        assertFalse(isValidPid("26067300002"))
        assertFalse(isValidPid("29027300000"))
        assertFalse(isValidPid("30027300000"))
        assertFalse(isValidPid("61057300000"))
        assertFalse(isValidPid("21257300000"))
        assertFalse(isValidPid("00000000000"))
        assertFalse(isValidPid("03017300000"))
        assertFalse(isValidPid("03017600000"))
        assertFalse(isValidPid("08065700000"))
    }

    @Test
    fun fnrCanBeValidated() {
        assertTrue(isValidPid("26067637924"))
    }

    @Test
    fun bostNummerCanBeValidated() {
        assertTrue(isValidPid("01327200336"), "Could not create fnr using a Bostnummer with birth month > 9")
        assertTrue(isValidPid("042501 00286"), "Could not create fnr using a Bostnummer with birth month < 10")
    }

    /**
     * Verify that PIDs that are of D-number type validate using strict validation even though they end with 00000N, where N is
     * in [0,9]. See CR 97238.
     */
    @Test
    fun creatingStrictDnrWithLowPnr() {
        assertTrue(isValidPid("52025800001"))
        assertTrue(isValidPid("61105800001"))
        assertTrue(isValidPid("62126000001"))
        assertTrue(isValidPid("47072900002"))
        assertTrue(isValidPid("62015900003"))
        assertTrue(isValidPid("43092700004"))
        assertTrue(isValidPid("50036000004"))
        assertTrue(isValidPid("46126000006"))
        assertTrue(isValidPid("71036100006"))
        assertTrue(isValidPid("71031300007"))
        assertTrue(isValidPid("54065600008"))
        assertTrue(isValidPid("60041400008"))
        assertTrue(isValidPid("56056000009"))
    }

    /**
     * The Dolly population are synthetic test persons generated by the Dolly
     * service in NAV.
     */
    @Test
    fun allowDollyPopulation() {
        assertTrue(isValidPid("15507600333"))
        assertTrue(isValidPid("55507608360"))

        assertTrue(isValidPid("29422059278"))
        assertTrue(isValidPid("69422056629"))

        assertTrue(isValidPid("05440355678"))
        assertTrue(isValidPid("45440356293"))

        assertTrue(isValidPid("12429400544"))
        assertTrue(isValidPid("52429405181"))

        assertTrue(isValidPid("12505209719"))
        assertTrue(isValidPid("52505209540"))

        assertTrue(isValidPid("21483609245"))
        assertTrue(isValidPid("61483601467"))

        assertTrue(isValidPid("21528704651"))
        assertTrue(isValidPid("61528703428"))
    }

    /**
     * Tenor - Test Norge - is a test population that is created in cooporation
     * with Skatt.
     */
    @Test
    fun allowTenorPopulation() {
        assertTrue(isValidPid("17912099997"))
        assertTrue(isValidPid("57912075186"))

        assertTrue(isValidPid("29822099635"))
        assertTrue(isValidPid("69822075096"))

        assertTrue(isValidPid("05840399895"))
        assertTrue(isValidPid("45840375084"))

        assertTrue(isValidPid("12829499914"))
        assertTrue(isValidPid("52829400197"))

        assertTrue(isValidPid("12905299938"))
        assertTrue(isValidPid("52905200100"))

        assertTrue(isValidPid("21883649874"))
        assertTrue(isValidPid("61883600222"))

        assertTrue(isValidPid("21929774873"))
        assertTrue(isValidPid("61929750062"))
    }
}
